// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.1.136 (2008-11-11)
// Machine:  macbook-pro-stas.local
// DateTime: 16.12.2010 14:17:41
// UserName: Stas
// Input file <Parser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Text;
using gppg;
using L1Specializer.SyntaxTree;
using L1Specializer.SyntaxTree.IfStatements;
using L1Specializer.Metadata;
using L1Runtime.SyntaxTree;

namespace L1Specializer
{
public enum Tokens {
    error=1,EOF=2,INT=3,CHAR=4,BOOL=5,ARRAY=6,
    NEW=7,ARRAY_LENGTH=8,ASSERT=9,RETURN=10,DEFINE=11,END=12,
    NULL=13,T=14,F=15,WHILE=16,DO=17,TO=18,
    STEP=19,IF=20,THEN=21,ELSE=22,ELSIF=23,INTEGER=24,
    CHAR_LITERAL=25,IDENTIFIER=26,STRING_LITERAL=27,NOT=28,LP=29,RP=30,
    LAP=31,RAP=32,LFP=33,RFP=34,SEMI=35,COMMA=36,
    ILLEGAL=37,ASSIGN=38,OR=39,XOR=40,AND=41,EQ=42,
    NEQ=43,GR=44,GREQ=45,LE=46,LEEQ=47,PLUS=48,
    MINUS=49,MULT=50,DIV=51,MOD=52,POWER=53,UMINUS=54};

public struct ValueType
{ 
    public char cVal; 
    public int iVal; 
    public string sVal; 

    public object Tag;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : IScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
    private Dictionary<int, string> aliasses = null;

  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[163];
    AddState(0,new State(new int[]{11,149},new int[]{-1,1,-4,3,-5,5}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{11,149,2,-4},new int[]{-1,4,-4,3,-5,5}));
    AddState(4,new State(-3));
    AddState(5,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,6,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(6,new State(new int[]{12,7}));
    AddState(7,new State(-5));
    AddState(8,new State(new int[]{36,9,12,-16,16,-16,23,-16,22,-16}));
    AddState(9,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,10,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(10,new State(-15));
    AddState(11,new State(-17));
    AddState(12,new State(new int[]{18,13}));
    AddState(13,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,14,-18,88}));
    AddState(14,new State(new int[]{17,15,19,144,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(15,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,16,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(16,new State(new int[]{12,17}));
    AddState(17,new State(-63));
    AddState(18,new State(new int[]{26,19,6,91}));
    AddState(19,new State(new int[]{38,20,35,-83,36,-83,12,-83,16,-83,23,-83,22,-83}));
    AddState(20,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,21,-18,88}));
    AddState(21,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,18,-65,35,-82,36,-82,12,-82,16,-82,23,-82,22,-82}));
    AddState(22,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,23,-18,88}));
    AddState(23,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,36,-27,12,-27,18,-27,16,-27,23,-27,22,-27,17,-27,19,-27,35,-27,32,-27,30,-27,21,-27}));
    AddState(24,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,25,-18,88}));
    AddState(25,new State(new int[]{32,26,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(26,new State(-28));
    AddState(27,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,28,-18,88}));
    AddState(28,new State(new int[]{38,-29,31,24,48,-29,49,-29,53,31,50,33,51,35,52,37,42,-29,43,-29,44,-29,45,-29,46,-29,47,-29,39,-29,41,-29,40,-29,36,-29,12,-29,18,-29,16,-29,23,-29,22,-29,17,-29,19,-29,35,-29,32,-29,30,-29,21,-29}));
    AddState(29,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,30,-18,88}));
    AddState(30,new State(new int[]{38,-30,31,24,48,-30,49,-30,53,31,50,33,51,35,52,37,42,-30,43,-30,44,-30,45,-30,46,-30,47,-30,39,-30,41,-30,40,-30,36,-30,12,-30,18,-30,16,-30,23,-30,22,-30,17,-30,19,-30,35,-30,32,-30,30,-30,21,-30}));
    AddState(31,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,32,-18,88}));
    AddState(32,new State(new int[]{38,-31,31,24,48,-31,49,-31,53,31,50,-31,51,-31,52,-31,42,-31,43,-31,44,-31,45,-31,46,-31,47,-31,39,-31,41,-31,40,-31,36,-31,12,-31,18,-31,16,-31,23,-31,22,-31,17,-31,19,-31,35,-31,32,-31,30,-31,21,-31}));
    AddState(33,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,34,-18,88}));
    AddState(34,new State(new int[]{38,-32,31,24,48,-32,49,-32,53,31,50,-32,51,-32,52,-32,42,-32,43,-32,44,-32,45,-32,46,-32,47,-32,39,-32,41,-32,40,-32,36,-32,12,-32,18,-32,16,-32,23,-32,22,-32,17,-32,19,-32,35,-32,32,-32,30,-32,21,-32}));
    AddState(35,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,36,-18,88}));
    AddState(36,new State(new int[]{38,-33,31,24,48,-33,49,-33,53,31,50,-33,51,-33,52,-33,42,-33,43,-33,44,-33,45,-33,46,-33,47,-33,39,-33,41,-33,40,-33,36,-33,12,-33,18,-33,16,-33,23,-33,22,-33,17,-33,19,-33,35,-33,32,-33,30,-33,21,-33}));
    AddState(37,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,38,-18,88}));
    AddState(38,new State(new int[]{38,-34,31,24,48,-34,49,-34,53,31,50,-34,51,-34,52,-34,42,-34,43,-34,44,-34,45,-34,46,-34,47,-34,39,-34,41,-34,40,-34,36,-34,12,-34,18,-34,16,-34,23,-34,22,-34,17,-34,19,-34,35,-34,32,-34,30,-34,21,-34}));
    AddState(39,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,40,-18,88}));
    AddState(40,new State(new int[]{38,-38,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-38,43,-38,44,-38,45,-38,46,-38,47,-38,39,-38,41,-38,40,-38,36,-38,12,-38,18,-38,16,-38,23,-38,22,-38,17,-38,19,-38,35,-38,32,-38,30,-38,21,-38}));
    AddState(41,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,42,-18,88}));
    AddState(42,new State(new int[]{38,-39,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-39,43,-39,44,-39,45,-39,46,-39,47,-39,39,-39,41,-39,40,-39,36,-39,12,-39,18,-39,16,-39,23,-39,22,-39,17,-39,19,-39,35,-39,32,-39,30,-39,21,-39}));
    AddState(43,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,44,-18,88}));
    AddState(44,new State(new int[]{38,-40,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-40,43,-40,44,-40,45,-40,46,-40,47,-40,39,-40,41,-40,40,-40,36,-40,12,-40,18,-40,16,-40,23,-40,22,-40,17,-40,19,-40,35,-40,32,-40,30,-40,21,-40}));
    AddState(45,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,46,-18,88}));
    AddState(46,new State(new int[]{38,-41,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-41,43,-41,44,-41,45,-41,46,-41,47,-41,39,-41,41,-41,40,-41,36,-41,12,-41,18,-41,16,-41,23,-41,22,-41,17,-41,19,-41,35,-41,32,-41,30,-41,21,-41}));
    AddState(47,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,48,-18,88}));
    AddState(48,new State(new int[]{38,-42,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-42,43,-42,44,-42,45,-42,46,-42,47,-42,39,-42,41,-42,40,-42,36,-42,12,-42,18,-42,16,-42,23,-42,22,-42,17,-42,19,-42,35,-42,32,-42,30,-42,21,-42}));
    AddState(49,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,50,-18,88}));
    AddState(50,new State(new int[]{38,-43,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,-43,43,-43,44,-43,45,-43,46,-43,47,-43,39,-43,41,-43,40,-43,36,-43,12,-43,18,-43,16,-43,23,-43,22,-43,17,-43,19,-43,35,-43,32,-43,30,-43,21,-43}));
    AddState(51,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,52,-18,88}));
    AddState(52,new State(new int[]{38,-44,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,-44,41,53,40,-44,36,-44,12,-44,18,-44,16,-44,23,-44,22,-44,17,-44,19,-44,35,-44,32,-44,30,-44,21,-44}));
    AddState(53,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,54,-18,88}));
    AddState(54,new State(new int[]{38,-45,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,-45,41,-45,40,-45,36,-45,12,-45,18,-45,16,-45,23,-45,22,-45,17,-45,19,-45,35,-45,32,-45,30,-45,21,-45}));
    AddState(55,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,56,-18,88}));
    AddState(56,new State(new int[]{38,-46,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,-46,41,53,40,-46,36,-46,12,-46,18,-46,16,-46,23,-46,22,-46,17,-46,19,-46,35,-46,32,-46,30,-46,21,-46}));
    AddState(57,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,58,-18,88}));
    AddState(58,new State(-35));
    AddState(59,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,60,-18,88}));
    AddState(60,new State(new int[]{38,-36,31,24,48,-36,49,-36,53,31,50,33,51,35,52,37,42,-36,43,-36,44,-36,45,-36,46,-36,47,-36,39,-36,41,-36,40,-36,36,-36,12,-36,18,-36,16,-36,23,-36,22,-36,17,-36,19,-36,35,-36,32,-36,30,-36,21,-36}));
    AddState(61,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,62,-18,88}));
    AddState(62,new State(-37));
    AddState(63,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,64,-18,88}));
    AddState(64,new State(new int[]{30,65,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(65,new State(-47));
    AddState(66,new State(new int[]{29,67}));
    AddState(67,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,68,-18,88}));
    AddState(68,new State(new int[]{30,69,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(69,new State(-48));
    AddState(70,new State(new int[]{29,71,38,-52,31,-52,48,-52,49,-52,53,-52,50,-52,51,-52,52,-52,42,-52,43,-52,44,-52,45,-52,46,-52,47,-52,39,-52,41,-52,40,-52,36,-52,12,-52,18,-52,16,-52,23,-52,22,-52,17,-52,19,-52,35,-52,32,-52,30,-52,21,-52}));
    AddState(71,new State(new int[]{30,74,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-17,72,-15,75,-18,88}));
    AddState(72,new State(new int[]{30,73}));
    AddState(73,new State(-49));
    AddState(74,new State(-50));
    AddState(75,new State(new int[]{35,76,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,30,-62}));
    AddState(76,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-17,77,-15,75,-18,88}));
    AddState(77,new State(-61));
    AddState(78,new State(new int[]{3,93,5,94},new int[]{-7,79,-9,92}));
    AddState(79,new State(new int[]{31,80,6,91}));
    AddState(80,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,81,-18,88}));
    AddState(81,new State(new int[]{32,82,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(82,new State(-51));
    AddState(83,new State(-53));
    AddState(84,new State(-54));
    AddState(85,new State(-55));
    AddState(86,new State(-56));
    AddState(87,new State(-57));
    AddState(88,new State(-58));
    AddState(89,new State(new int[]{27,89,38,-60,31,-60,48,-60,49,-60,53,-60,50,-60,51,-60,52,-60,42,-60,43,-60,44,-60,45,-60,46,-60,47,-60,39,-60,41,-60,40,-60,36,-60,12,-60,18,-60,16,-60,23,-60,22,-60,17,-60,19,-60,35,-60,32,-60,30,-60,21,-60},new int[]{-18,90}));
    AddState(90,new State(-59));
    AddState(91,new State(-8));
    AddState(92,new State(-9));
    AddState(93,new State(-10));
    AddState(94,new State(-11));
    AddState(95,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,18,-66,36,-21,12,-21,16,-21,23,-21,22,-21}));
    AddState(96,new State(-18));
    AddState(97,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,98,-18,88}));
    AddState(98,new State(new int[]{17,99,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(99,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,100,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(100,new State(new int[]{12,101}));
    AddState(101,new State(-67));
    AddState(102,new State(-19));
    AddState(103,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,104,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(104,new State(new int[]{16,105}));
    AddState(105,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,106,-18,88}));
    AddState(106,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,36,-68,12,-68,16,-68,23,-68,22,-68}));
    AddState(107,new State(-20));
    AddState(108,new State(-69));
    AddState(109,new State(new int[]{12,110,23,111,22,141}));
    AddState(110,new State(-73));
    AddState(111,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-25,112,-15,138,-18,88}));
    AddState(112,new State(new int[]{23,113,12,-74,22,-74}));
    AddState(113,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,114,-18,88}));
    AddState(114,new State(new int[]{21,115,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(115,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,116,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(116,new State(-78));
    AddState(117,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,118,-18,88}));
    AddState(118,new State(new int[]{21,119,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(119,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,120,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(120,new State(-72));
    AddState(121,new State(-70));
    AddState(122,new State(new int[]{12,123,22,124}));
    AddState(123,new State(-75));
    AddState(124,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,125,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(125,new State(new int[]{12,126}));
    AddState(126,new State(-77));
    AddState(127,new State(-71));
    AddState(128,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,36,-23,12,-23,16,-23,23,-23,22,-23},new int[]{-15,129,-18,88}));
    AddState(129,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,36,-22,12,-22,16,-22,23,-22,22,-22}));
    AddState(130,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,131,-18,88}));
    AddState(131,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,36,-24,12,-24,16,-24,23,-24,22,-24}));
    AddState(132,new State(new int[]{35,133,36,-25,12,-25,16,-25,23,-25,22,-25}));
    AddState(133,new State(new int[]{26,134}));
    AddState(134,new State(new int[]{38,135,35,-81,36,-81,12,-81,16,-81,23,-81,22,-81}));
    AddState(135,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,136,-18,88}));
    AddState(136,new State(new int[]{38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55,35,-80,36,-80,12,-80,16,-80,23,-80,22,-80}));
    AddState(137,new State(-26));
    AddState(138,new State(new int[]{21,139,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(139,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,140,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(140,new State(-79));
    AddState(141,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,142,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(142,new State(new int[]{12,143}));
    AddState(143,new State(-76));
    AddState(144,new State(new int[]{49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89},new int[]{-15,145,-18,88}));
    AddState(145,new State(new int[]{17,146,38,22,31,24,48,27,49,29,53,31,50,33,51,35,52,37,42,39,43,41,44,43,45,45,46,47,47,49,39,51,41,53,40,55}));
    AddState(146,new State(new int[]{3,93,5,94,49,57,48,59,28,61,29,63,8,66,26,70,7,78,24,83,25,84,14,85,15,86,13,87,27,89,16,97,17,103,20,117,10,128,9,130,36,137},new int[]{-6,147,-10,8,-11,11,-19,12,-7,18,-9,92,-15,95,-18,88,-12,96,-13,102,-14,107,-20,108,-23,109,-21,121,-24,122,-22,127,-16,132}));
    AddState(147,new State(new int[]{12,148}));
    AddState(148,new State(-64));
    AddState(149,new State(new int[]{26,159,3,93,5,94},new int[]{-7,150,-9,92}));
    AddState(150,new State(new int[]{26,151,6,91}));
    AddState(151,new State(new int[]{29,152}));
    AddState(152,new State(new int[]{3,93,5,94,30,-14},new int[]{-8,153,-7,155,-9,92}));
    AddState(153,new State(new int[]{30,154}));
    AddState(154,new State(-6));
    AddState(155,new State(new int[]{26,156,6,91}));
    AddState(156,new State(new int[]{35,157,30,-13}));
    AddState(157,new State(new int[]{3,93,5,94,30,-14},new int[]{-8,158,-7,155,-9,92}));
    AddState(158,new State(-12));
    AddState(159,new State(new int[]{29,160}));
    AddState(160,new State(new int[]{3,93,5,94,30,-14},new int[]{-8,161,-7,155,-9,92}));
    AddState(161,new State(new int[]{30,162}));
    AddState(162,new State(-7));

    rules=new Rule[84];
    rules[1]=new Rule(-3, new int[]{-1,2});
    rules[2]=new Rule(-2, new int[]{-1,2});
    rules[3]=new Rule(-1, new int[]{-4,-1});
    rules[4]=new Rule(-1, new int[]{-4});
    rules[5]=new Rule(-4, new int[]{-5,-6,12});
    rules[6]=new Rule(-5, new int[]{11,-7,26,29,-8,30});
    rules[7]=new Rule(-5, new int[]{11,26,29,-8,30});
    rules[8]=new Rule(-7, new int[]{-7,6});
    rules[9]=new Rule(-7, new int[]{-9});
    rules[10]=new Rule(-9, new int[]{3});
    rules[11]=new Rule(-9, new int[]{5});
    rules[12]=new Rule(-8, new int[]{-7,26,35,-8});
    rules[13]=new Rule(-8, new int[]{-7,26});
    rules[14]=new Rule(-8, new int[]{});
    rules[15]=new Rule(-6, new int[]{-10,36,-6});
    rules[16]=new Rule(-6, new int[]{-10});
    rules[17]=new Rule(-10, new int[]{-11});
    rules[18]=new Rule(-10, new int[]{-12});
    rules[19]=new Rule(-10, new int[]{-13});
    rules[20]=new Rule(-10, new int[]{-14});
    rules[21]=new Rule(-10, new int[]{-15});
    rules[22]=new Rule(-10, new int[]{10,-15});
    rules[23]=new Rule(-10, new int[]{10});
    rules[24]=new Rule(-10, new int[]{9,-15});
    rules[25]=new Rule(-10, new int[]{-16});
    rules[26]=new Rule(-10, new int[]{36});
    rules[27]=new Rule(-15, new int[]{-15,38,-15});
    rules[28]=new Rule(-15, new int[]{-15,31,-15,32});
    rules[29]=new Rule(-15, new int[]{-15,48,-15});
    rules[30]=new Rule(-15, new int[]{-15,49,-15});
    rules[31]=new Rule(-15, new int[]{-15,53,-15});
    rules[32]=new Rule(-15, new int[]{-15,50,-15});
    rules[33]=new Rule(-15, new int[]{-15,51,-15});
    rules[34]=new Rule(-15, new int[]{-15,52,-15});
    rules[35]=new Rule(-15, new int[]{49,-15});
    rules[36]=new Rule(-15, new int[]{48,-15});
    rules[37]=new Rule(-15, new int[]{28,-15});
    rules[38]=new Rule(-15, new int[]{-15,42,-15});
    rules[39]=new Rule(-15, new int[]{-15,43,-15});
    rules[40]=new Rule(-15, new int[]{-15,44,-15});
    rules[41]=new Rule(-15, new int[]{-15,45,-15});
    rules[42]=new Rule(-15, new int[]{-15,46,-15});
    rules[43]=new Rule(-15, new int[]{-15,47,-15});
    rules[44]=new Rule(-15, new int[]{-15,39,-15});
    rules[45]=new Rule(-15, new int[]{-15,41,-15});
    rules[46]=new Rule(-15, new int[]{-15,40,-15});
    rules[47]=new Rule(-15, new int[]{29,-15,30});
    rules[48]=new Rule(-15, new int[]{8,29,-15,30});
    rules[49]=new Rule(-15, new int[]{26,29,-17,30});
    rules[50]=new Rule(-15, new int[]{26,29,30});
    rules[51]=new Rule(-15, new int[]{7,-7,31,-15,32});
    rules[52]=new Rule(-15, new int[]{26});
    rules[53]=new Rule(-15, new int[]{24});
    rules[54]=new Rule(-15, new int[]{25});
    rules[55]=new Rule(-15, new int[]{14});
    rules[56]=new Rule(-15, new int[]{15});
    rules[57]=new Rule(-15, new int[]{13});
    rules[58]=new Rule(-15, new int[]{-18});
    rules[59]=new Rule(-18, new int[]{27,-18});
    rules[60]=new Rule(-18, new int[]{27});
    rules[61]=new Rule(-17, new int[]{-15,35,-17});
    rules[62]=new Rule(-17, new int[]{-15});
    rules[63]=new Rule(-11, new int[]{-19,18,-15,17,-6,12});
    rules[64]=new Rule(-11, new int[]{-19,18,-15,19,-15,17,-6,12});
    rules[65]=new Rule(-19, new int[]{-7,26,38,-15});
    rules[66]=new Rule(-19, new int[]{-15});
    rules[67]=new Rule(-12, new int[]{16,-15,17,-6,12});
    rules[68]=new Rule(-13, new int[]{17,-6,16,-15});
    rules[69]=new Rule(-14, new int[]{-20});
    rules[70]=new Rule(-14, new int[]{-21});
    rules[71]=new Rule(-14, new int[]{-22});
    rules[72]=new Rule(-23, new int[]{20,-15,21,-6});
    rules[73]=new Rule(-20, new int[]{-23,12});
    rules[74]=new Rule(-24, new int[]{-23,23,-25});
    rules[75]=new Rule(-21, new int[]{-24,12});
    rules[76]=new Rule(-22, new int[]{-23,22,-6,12});
    rules[77]=new Rule(-22, new int[]{-24,22,-6,12});
    rules[78]=new Rule(-25, new int[]{-25,23,-15,21,-6});
    rules[79]=new Rule(-25, new int[]{-15,21,-6});
    rules[80]=new Rule(-16, new int[]{-16,35,26,38,-15});
    rules[81]=new Rule(-16, new int[]{-16,35,26});
    rules[82]=new Rule(-16, new int[]{-7,26,38,-15});
    rules[83]=new Rule(-16, new int[]{-7,26});

    nonTerminals = new string[] {"", "program", "s", "$accept", "function_definition", 
      "function_header", "statement_list", "type", "parameters_list", "primitive_type", 
      "statement", "cycle_to", "while_do", "do_while", "if_set", "expression", 
      "variable_definition_list", "va_list", "string_from_literals", "cycle_to_start", 
      "primitive_if", "switch_if", "alternative_if", "if_clause", "switch_if_sep", 
      "elsif_set", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // s -> program, EOF
{

			}
        break;
      case 3: // program -> function_definition, program
{
				L1Program program = (L1Program)value_stack.array[value_stack.top-1].Tag;
				program.AddFunctionToForward((FunctionDefinition)value_stack.array[value_stack.top-2].Tag);
				yyval.Tag = program;
            }
        break;
      case 4: // program -> function_definition
{
				L1Program program = CompilerServices.Program;
				program.AddFunctionToForward((FunctionDefinition)value_stack.array[value_stack.top-1].Tag);
				yyval.Tag = program;
				CompilerServices.Program = program;
            }
        break;
      case 5: // function_definition -> function_header, statement_list, END
{
				FunctionDefinition definition = new FunctionDefinition();
				definition.Header = (FunctionHeader)value_stack.array[value_stack.top-3].Tag;
				definition.Statements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				definition.Location = yyloc;
				yyval.Tag = definition;
            }
        break;
      case 6: // function_header -> DEFINE, type, IDENTIFIER, LP, parameters_list, RP
{
 				FunctionHeader header = new FunctionHeader(value_stack.array[value_stack.top-4].sVal, (VariableType)value_stack.array[value_stack.top-5].Tag);
				List<FunctionParameter> parameters = (List<FunctionParameter>)value_stack.array[value_stack.top-2].Tag;
				foreach (FunctionParameter p in parameters)
				{
					header.AddParameter(p);
				}
				header.Location = yyloc;
				yyval.Tag = header;           
            }
        break;
      case 7: // function_header -> DEFINE, IDENTIFIER, LP, parameters_list, RP
{
				FunctionHeader header = new FunctionHeader(value_stack.array[value_stack.top-4].sVal, null);
				List<FunctionParameter> parameters = (List<FunctionParameter>)value_stack.array[value_stack.top-2].Tag;
				foreach (FunctionParameter p in parameters)
				{
					header.AddParameter(p);
				}
				header.Location = yyloc;
				yyval.Tag = header;
            }
        break;
      case 8: // type -> type, ARRAY
{
				VariableType type = new VariableType(VariableTypeEnum.Array, (VariableType)value_stack.array[value_stack.top-2].Tag);
				yyval.Tag = type;
            }
        break;
      case 9: // type -> primitive_type
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 10: // primitive_type -> INT
{
				VariableType type = new VariableType(VariableTypeEnum.Integer);
				yyval.Tag = type;
            }
        break;
      case 11: // primitive_type -> BOOL
{
 				VariableType type = new VariableType(VariableTypeEnum.Bool);
 				yyval.Tag = type;
            }
        break;
      case 12: // parameters_list -> type, IDENTIFIER, SEMI, parameters_list
{
				List<FunctionParameter> list = (List<FunctionParameter>)value_stack.array[value_stack.top-1].Tag;
				FunctionParameter parameter = new FunctionParameter(value_stack.array[value_stack.top-3].sVal, (VariableType)value_stack.array[value_stack.top-4].Tag);
				parameter.Location = yyloc;
				list.Insert(0, parameter);
				yyval.Tag = list;
			}
        break;
      case 13: // parameters_list -> type, IDENTIFIER
{
				List<FunctionParameter> list = new List<FunctionParameter>();
				FunctionParameter parameter = new FunctionParameter(value_stack.array[value_stack.top-1].sVal, (VariableType)value_stack.array[value_stack.top-2].Tag);
				parameter.Location = yyloc;
				list.Insert(0, parameter);
				yyval.Tag = list;
            }
        break;
      case 14: // parameters_list -> /* empty */
{
				yyval.Tag = new List<FunctionParameter>();
			}
        break;
      case 15: // statement_list -> statement, COMMA, statement_list
{
				StatementList statementList = (StatementList)value_stack.array[value_stack.top-1].Tag;
				statementList.AddForward((Statement)value_stack.array[value_stack.top-3].Tag);
				yyval.Tag = statementList;
            }
        break;
      case 16: // statement_list -> statement
{
				StatementList statementList = new StatementList();
				statementList.AddForward((Statement)value_stack.array[value_stack.top-1].Tag);
				yyval.Tag = statementList;
            }
        break;
      case 17: // statement -> cycle_to
{	
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 18: // statement -> while_do
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 19: // statement -> do_while
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 20: // statement -> if_set
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 21: // statement -> expression
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 22: // statement -> RETURN, expression
{
            	ReturnStatement statement = new ReturnStatement();
            	statement.Expression = (Expression)value_stack.array[value_stack.top-1].Tag;
            	statement.Location = yyloc;
				yyval.Tag = statement;
            }
        break;
      case 23: // statement -> RETURN
{
				ReturnStatement statement = new ReturnStatement();
				statement.Location = yyloc;
				yyval.Tag = statement;
            }
        break;
      case 24: // statement -> ASSERT, expression
{
                AssertStatement statement = new AssertStatement();
            	statement.Expression = (Expression)value_stack.array[value_stack.top-1].Tag;
            	statement.Location = yyloc;
				yyval.Tag = statement;
            }
        break;
      case 25: // statement -> variable_definition_list
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 26: // statement -> COMMA
{
				yyval.Tag = Statement.Dummy;
            }
        break;
      case 27: // expression -> expression, ASSIGN, expression
{ 	
                	Expression expr = new Expression();
					expr.OpType = OperationType.Assign;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 28: // expression -> expression, LAP, expression, RAP
{ 
                    Expression expr = new Expression();
					expr.OpType = OperationType.ArrayAccess;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-4].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-2].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 29: // expression -> expression, PLUS, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Plus;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 30: // expression -> expression, MINUS, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Minus;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 31: // expression -> expression, POWER, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Power;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 32: // expression -> expression, MULT, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Mult;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 33: // expression -> expression, DIV, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Div;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 34: // expression -> expression, MOD, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Mod;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 35: // expression -> MINUS, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.UMinus;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.RightNode = null;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 36: // expression -> PLUS, expression
{ 
					//TODO: ïðîâåðêà íà íå Bool
					yyval.Tag = value_stack.array[value_stack.top-1].Tag;
                }
        break;
      case 37: // expression -> NOT, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.UNot;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.RightNode = null;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 38: // expression -> expression, EQ, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Equals;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 39: // expression -> expression, NEQ, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.NotEquals;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 40: // expression -> expression, GR, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Gr;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 41: // expression -> expression, GREQ, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Greq;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 42: // expression -> expression, LE, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Le;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 43: // expression -> expression, LEEQ, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Leeq;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 44: // expression -> expression, OR, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Or;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 45: // expression -> expression, AND, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.And;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 46: // expression -> expression, XOR, expression
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.Xor;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-3].Tag;
					expr.RightNode = (Expression)value_stack.array[value_stack.top-1].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 
                }
        break;
      case 47: // expression -> LP, expression, RP
{ 
					yyval.Tag = value_stack.array[value_stack.top-2].Tag;
                }
        break;
      case 48: // expression -> ARRAY_LENGTH, LP, expression, RP
{
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.ArrayLength;
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-2].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 								
				}
        break;
      case 49: // expression -> IDENTIFIER, LP, va_list, RP
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.FunctionCall;
					expr.Value = value_stack.array[value_stack.top-4].sVal;
					expr.VAList = (VAList)value_stack.array[value_stack.top-2].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 					
                }
        break;
      case 50: // expression -> IDENTIFIER, LP, RP
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.FunctionCall;
					expr.Value = value_stack.array[value_stack.top-3].sVal;
					expr.VAList = new VAList();
					expr.Location = yyloc;
					yyval.Tag = expr; 					
                }
        break;
      case 51: // expression -> NEW, type, LAP, expression, RAP
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.ArrayAlloc;
					expr.Value = value_stack.array[value_stack.top-4].Tag;
					expr.ResultType = new VariableType(VariableTypeEnum.Array, (VariableType)value_stack.array[value_stack.top-4].Tag);
					expr.LeftNode = (Expression)value_stack.array[value_stack.top-2].Tag;
					expr.Location = yyloc;
					yyval.Tag = expr; 						
                }
        break;
      case 52: // expression -> IDENTIFIER
{ 
					//Ñþäà íóæíî áóäåò åùå äîáàâèòü òèï ïåðåìåííîé (äëÿ ñåìàíòè÷åñêîãî àíàëèçà)
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.VariableAccess;
					expr.Value = value_stack.array[value_stack.top-1].sVal;
					expr.Location = yyloc;
					yyval.Tag = expr; 						
                }
        break;
      case 53: // expression -> INTEGER
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.IntValue = value_stack.array[value_stack.top-1].iVal;
					expr.ResultType = VariableType.IntType;
					expr.Location = yyloc;
					yyval.Tag = expr; 	                
                }
        break;
      case 54: // expression -> CHAR_LITERAL
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.IntValue = value_stack.array[value_stack.top-1].iVal;
					expr.ResultType = VariableType.IntType;
					expr.Location = yyloc;
					yyval.Tag = expr;                 
                }
        break;
      case 55: // expression -> T
{ 
					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.BoolValue = true;
					expr.ResultType = VariableType.BoolType;
					expr.Location = yyloc;
					yyval.Tag = expr;                 
                }
        break;
      case 56: // expression -> F
{ 
 					Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.BoolValue = false;
					expr.ResultType = VariableType.BoolType;
					expr.Location = yyloc;
					yyval.Tag = expr;                
                }
        break;
      case 57: // expression -> NULL
{ 
                 	Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.Value = null;
					expr.ResultType = VariableType.NullType;
					expr.Location = yyloc;
					yyval.Tag = expr;     
                }
        break;
      case 58: // expression -> string_from_literals
{
                 	Expression expr = new Expression();
					expr.OpType = OperationType.None;
					expr.IsLeaf = true;
					expr.LeafType = ExpressionLeafType.Constant;
					expr.Value = value_stack.array[value_stack.top-1].sVal;
					expr.ResultType = new VariableType(VariableTypeEnum.Array, VariableType.IntType);
					expr.Location = yyloc;
					yyval.Tag = expr;     					 
                }
        break;
      case 59: // string_from_literals -> STRING_LITERAL, string_from_literals
{
					yyval.sVal = value_stack.array[value_stack.top-2].sVal + value_stack.array[value_stack.top-1].sVal;
                }
        break;
      case 60: // string_from_literals -> STRING_LITERAL
{
					yyval.sVal = value_stack.array[value_stack.top-1].sVal;
                }
        break;
      case 61: // va_list -> expression, SEMI, va_list
{
					yyval.Tag = value_stack.array[value_stack.top-1].Tag;
					((VAList)yyval.Tag).AddForward((Expression)value_stack.array[value_stack.top-3].Tag);
                }
        break;
      case 62: // va_list -> expression
{
					VAList list = new VAList();
					list.Add((Expression)value_stack.array[value_stack.top-1].Tag);
					yyval.Tag = list;
                }
        break;
      case 63: // cycle_to -> cycle_to_start, TO, expression, DO, statement_list, END
{
				CycleStatement cycle = (CycleStatement)value_stack.array[value_stack.top-6].Tag;
				cycle.EndValue = (Expression)value_stack.array[value_stack.top-4].Tag;
				cycle.Statements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				cycle.Location = yyloc;
				yyval.Tag = cycle;
            }
        break;
      case 64: // cycle_to -> cycle_to_start, TO, expression, STEP, expression, DO, 
               //             statement_list, END
{
				CycleStatement cycle = (CycleStatement)value_stack.array[value_stack.top-8].Tag;
				cycle.EndValue = (Expression)value_stack.array[value_stack.top-6].Tag;
				cycle.Step = (Expression)value_stack.array[value_stack.top-4].Tag;
				cycle.Statements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				cycle.Location = yyloc;
				yyval.Tag = cycle;
            }
        break;
      case 65: // cycle_to_start -> type, IDENTIFIER, ASSIGN, expression
{
				CycleStatement cycle = new CycleStatement();
				cycle.VariableType = (VariableType)value_stack.array[value_stack.top-4].Tag;
				cycle.DeclareVariable = (string)value_stack.array[value_stack.top-3].sVal;
				cycle.Init = (Expression)value_stack.array[value_stack.top-1].Tag;
				yyval.Tag = cycle;
            }
        break;
      case 66: // cycle_to_start -> expression
{
				CycleStatement cycle = new CycleStatement();
				cycle.Init = (Expression)value_stack.array[value_stack.top-1].Tag;
				yyval.Tag = cycle;				
            }
        break;
      case 67: // while_do -> WHILE, expression, DO, statement_list, END
{
				WhileDoStatement statement = new WhileDoStatement();
				statement.Condition = (Expression)value_stack.array[value_stack.top-4].Tag;
				statement.Statements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				yyval.Tag = statement;
            }
        break;
      case 68: // do_while -> DO, statement_list, WHILE, expression
{
            	DoWhileStatement statement = new DoWhileStatement();
				statement.Condition = (Expression)value_stack.array[value_stack.top-1].Tag;
				statement.Statements = (StatementList)value_stack.array[value_stack.top-3].Tag;
				yyval.Tag = statement;
            }
        break;
      case 69: // if_set -> primitive_if
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 70: // if_set -> switch_if
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 71: // if_set -> alternative_if
{
				yyval.Tag = value_stack.array[value_stack.top-1].Tag;
            }
        break;
      case 72: // if_clause -> IF, expression, THEN, statement_list
{
				IfClause clause = new IfClause();
				clause.Condition = (Expression)value_stack.array[value_stack.top-3].Tag;
				clause.Statements = (StatementList)value_stack.array[value_stack.top-1].Tag;
				clause.Location = yyloc;
				yyval.Tag = clause;
            }
        break;
      case 73: // primitive_if -> if_clause, END
{
				IfStatement statement = new IfStatement();
				statement.Clauses.Add((IfClause)value_stack.array[value_stack.top-2].Tag);
				yyval.Tag = statement;
            }
        break;
      case 74: // switch_if_sep -> if_clause, ELSIF, elsif_set
{
				IfStatement statement = new IfStatement();
				statement.Clauses.Add((IfClause)value_stack.array[value_stack.top-3].Tag);
				statement.Clauses.AddRange((IfClauseList)value_stack.array[value_stack.top-1].Tag);
				yyval.Tag = statement;
            }
        break;
      case 75: // switch_if -> switch_if_sep, END
{
				yyval.Tag = value_stack.array[value_stack.top-2].Tag; 
            }
        break;
      case 76: // alternative_if -> if_clause, ELSE, statement_list, END
{
				IfStatement statement = new IfStatement();
				statement.Clauses.Add((IfClause)value_stack.array[value_stack.top-4].Tag);
				statement.AlternativeStatements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				yyval.Tag = statement;
				
            }
        break;
      case 77: // alternative_if -> switch_if_sep, ELSE, statement_list, END
{
				IfStatement statement = (IfStatement)value_stack.array[value_stack.top-4].Tag;
				statement.AlternativeStatements = (StatementList)value_stack.array[value_stack.top-2].Tag;
				yyval.Tag = statement;
            }
        break;
      case 78: // elsif_set -> elsif_set, ELSIF, expression, THEN, statement_list
{
				IfClauseList clauseList = (IfClauseList)value_stack.array[value_stack.top-5].Tag;
				IfClause clause = new IfClause();
				clauseList.Add(clause);
				clause.Condition = (Expression)value_stack.array[value_stack.top-3].Tag;
				clause.Statements = (StatementList)value_stack.array[value_stack.top-1].Tag;
				yyval.Tag = clauseList;
            }
        break;
      case 79: // elsif_set -> expression, THEN, statement_list
{
				IfClauseList clauseList = new IfClauseList();
				IfClause clause = new IfClause();
				clauseList.Add(clause);
				clause.Condition = (Expression)value_stack.array[value_stack.top-3].Tag;
				clause.Statements = (StatementList)value_stack.array[value_stack.top-1].Tag;
				yyval.Tag = clauseList;
            }
        break;
      case 80: // variable_definition_list -> variable_definition_list, SEMI, IDENTIFIER, ASSIGN, 
               //                             expression
{
				VariableDefinitionList list = (VariableDefinitionList)value_stack.array[value_stack.top-5].Tag;
				VariableSymbol symbol = new VariableSymbol();
				symbol.VariableType = list.Definitions[0].VariableType;
				symbol.Name = value_stack.array[value_stack.top-3].sVal;
				symbol.InitExpression = (Expression)value_stack.array[value_stack.top-1].Tag;
				symbol.Location = yyloc;
				list.Add(symbol);
				yyval.Tag = list;  				
            }
        break;
      case 81: // variable_definition_list -> variable_definition_list, SEMI, IDENTIFIER
{
 				VariableDefinitionList list = (VariableDefinitionList)value_stack.array[value_stack.top-3].Tag;
				VariableSymbol symbol = new VariableSymbol();
				symbol.VariableType = list.Definitions[0].VariableType;
				symbol.Name = value_stack.array[value_stack.top-1].sVal;
				symbol.Location = yyloc;
				list.Add(symbol);
				yyval.Tag = list;            
            }
        break;
      case 82: // variable_definition_list -> type, IDENTIFIER, ASSIGN, expression
{
				VariableDefinitionList list = new VariableDefinitionList();
				VariableSymbol symbol = new VariableSymbol();
				symbol.VariableType = (VariableType)value_stack.array[value_stack.top-4].Tag;
				symbol.Name = value_stack.array[value_stack.top-3].sVal;
				symbol.InitExpression = (Expression)value_stack.array[value_stack.top-1].Tag;
				symbol.Location = yyloc;
				list.Add(symbol);
				yyval.Tag = list;            
            }
        break;
      case 83: // variable_definition_list -> type, IDENTIFIER
{
				VariableDefinitionList list = new VariableDefinitionList();
				VariableSymbol symbol = new VariableSymbol();
				symbol.VariableType = (VariableType)value_stack.array[value_stack.top-2].Tag;
				symbol.Name = value_stack.array[value_stack.top-1].sVal;
				symbol.Location = yyloc;
				list.Add(symbol);
				yyval.Tag = list;
            }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString())
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
